#include <iostream>
#include <string>
gh pr checkout 1
struct Cmd
{
  int x;
 [ int y;
};
gh checkout i.yml
constexpr Cmd L = {-1, 0};
constexpr Cmd R = {+1, 0};
constexpr Cmd U = {0, +1};
constexpr Cmd D = {0, -1};

struct Step
{
  Cmd dir;
  int n;
  uint32_t color;
};

#define TEST_INPUT 0

#if TEST_INPUT

const Step input[] =
{
{R, 6, 0x70c710},
{D, 5, 0x0dc571},
{L, 2, 0x5713f0},
{D, 2, 0xd2c081},
{R, 2, 0x59c680},
{D, 2, 0x411b91},
{L, 5, 0x8ceee2},
{U, 2, 0xcaa173},
{L, 1, 0x1b58a2},
{U, 2, 0xcaa171},
{R, 2, 0x7807d2},
{U, 3, 0xa77fa3},
{L, 2, 0x015232},
{U, 2, 0x7a21e3}
};

#else

const Step input[] =
{
{L, 4, 0x272dc0},
{U, 6, 0x2e1c23},
{R, 4, 0x56c590},
{U, 6, 0x38a373},
{L, 9, 0x266fd0},
{U, 2, 0x60dcd3},
{L, 6, 0x214800},
{U, 3, 0x1999f3},
{L, 7, 0x2d3130},
{U, 3, 0x508b23},
{L, 11, 0x454210},
{U, 2, 0x194153},
{L, 2, 0x35c6a0},
{U, 7, 0x836661},
{R, 3, 0x22d120},
{U, 2, 0x2c7f73},
{R, 8, 0x425170},
{U, 5, 0x47b783},
{L, 8, 0x1d50c0},
{U, 4, 0x4cfc63},
{L, 3, 0x0bf490},
{U, 5, 0x64ce93},
{L, 6, 0x27cf90},
{U, 3, 0x0fafd3},
{R, 5, 0x5ad080},
{U, 5, 0x0e5043},
{R, 4, 0x2e7130},
{U, 2, 0x45e923},
{R, 9, 0x3d0622},
{U, 4, 0x0f2ec3},
{L, 3, 0x167760},
{U, 4, 0x4ce5f3},
{L, 10, 0x167762},
{D, 4, 0x4df533},
{L, 3, 0x49b3e2},
{U, 4, 0x270751},
{L, 2, 0x462890},
{U, 5, 0x38c861},
{L, 9, 0x462892},
{U, 4, 0x4a3a31},
{L, 8, 0x2a5742},
{D, 5, 0x3dc7a3},
{L, 4, 0x0c99a2},
{U, 5, 0x39b1c3},
{L, 4, 0x0a7460},
{U, 9, 0x44f3f3},
{R, 4, 0x05ef50},
{U, 5, 0x40ed63},
{L, 7, 0x7758f0},
{D, 6, 0x40ed61},
{L, 3, 0x31c980},
{D, 5, 0x45d223},
{L, 2, 0x21b670},
{D, 8, 0x1769c3},
{L, 3, 0x09ad42},
{U, 5, 0x1ee883},
{L, 9, 0x835752},
{U, 3, 0x1ee881},
{L, 5, 0x4e3802},
{U, 8, 0x0ca253},
{L, 8, 0x064b82},
{U, 4, 0x526003},
{R, 10, 0x1d9092},
{U, 6, 0x5f3f11},
{R, 3, 0x65ff32},
{U, 3, 0x03f8c1},
{L, 12, 0x1a47a2},
{U, 2, 0x6337d3},
{L, 6, 0x1976e2},
{U, 10, 0x621563},
{L, 5, 0x178142},
{D, 9, 0x50c5a3},
{L, 2, 0x511aa2},
{D, 7, 0x437ef3},
{L, 6, 0x667662},
{U, 5, 0x65ced3},
{L, 8, 0x630742},
{U, 7, 0x4e1673},
{R, 8, 0x50f990},
{U, 4, 0x693273},
{L, 7, 0x1e5230},
{U, 6, 0x40f783},
{R, 5, 0x0ac5b0},
{U, 7, 0x072fd3},
{R, 4, 0x1091a0},
{U, 6, 0x4cfdf3},
{R, 4, 0x7c7710},
{D, 13, 0x1beb83},
{R, 3, 0x537120},
{U, 5, 0x799bb1},
{R, 4, 0x074050},
{U, 6, 0x203143},
{R, 10, 0x1d2f30},
{U, 7, 0x508413},
{R, 6, 0x6f4e60},
{U, 10, 0x0b3c33},
{L, 3, 0x1f31d0},
{U, 4, 0x078463},
{L, 5, 0x0965f0},
{D, 8, 0x1c4723},
{L, 2, 0x0540c0},
{D, 3, 0x3c5643},
{L, 6, 0x3074b0},
{U, 11, 0x1c8753},
{L, 4, 0x4b2650},
{U, 4, 0x018403},
{L, 4, 0x2206e0},
{U, 3, 0x1d6df3},
{R, 3, 0x77d422},
{U, 4, 0x1ad123},
{R, 6, 0x392e10},
{U, 5, 0x008733},
{L, 5, 0x21fb70},
{U, 6, 0x04e543},
{L, 10, 0x5877e0},
{U, 5, 0x53c7a1},
{R, 3, 0x2e5380},
{U, 5, 0x53c7a3},
{R, 7, 0x32a830},
{U, 2, 0x6475a3},
{R, 5, 0x45e7d2},
{U, 7, 0x5000d3},
{L, 3, 0x080412},
{U, 3, 0x01d273},
{L, 4, 0x3344c2},
{U, 7, 0x3b9843},
{L, 2, 0x296bb2},
{U, 5, 0x2d6a53},
{R, 4, 0x56dc82},
{U, 4, 0x4f4f93},
{R, 5, 0x132442},
{U, 8, 0x26c3e3},
{L, 5, 0x77d420},
{U, 10, 0x059893},
{R, 7, 0x2a7b02},
{U, 4, 0x33abe3},
{R, 5, 0x47ef12},
{U, 5, 0x25b5e3},
{R, 8, 0x206d12},
{D, 8, 0x25b5e1},
{R, 6, 0x38a342},
{U, 5, 0x34e463},
{R, 4, 0x4437d0},
{U, 11, 0x42fdf3},
{R, 4, 0x0b2500},
{D, 6, 0x1f9b63},
{R, 5, 0x64fbb0},
{D, 10, 0x575fc3},
{R, 5, 0x0912b0},
{D, 4, 0x76fb21},
{L, 9, 0x1cad30},
{D, 4, 0x489e93},
{L, 3, 0x1e8b80},
{D, 2, 0x302593},
{L, 3, 0x21e3a0},
{D, 7, 0x179bc3},
{L, 9, 0x351ce2},
{D, 6, 0x624033},
{R, 5, 0x29df32},
{D, 9, 0x308f03},
{R, 5, 0x5efc10},
{U, 9, 0x161b73},
{R, 4, 0x1effc0},
{D, 3, 0x754783},
{R, 9, 0x1effc2},
{D, 6, 0x104433},
{R, 9, 0x2b53f0},
{D, 3, 0x53d1a3},
{L, 10, 0x6001a0},
{D, 2, 0x102453},
{L, 8, 0x221370},
{D, 4, 0x0a0e71},
{R, 9, 0x57b730},
{D, 5, 0x554111},
{R, 3, 0x0a2250},
{D, 3, 0x49f6a1},
{R, 6, 0x598d50},
{D, 6, 0x344611},
{R, 4, 0x596852},
{D, 8, 0x2003a1},
{L, 5, 0x30eda0},
{D, 5, 0x5f81e1},
{R, 5, 0x2cfc50},
{D, 9, 0x3d8ac1},
{R, 4, 0x3a1050},
{D, 3, 0x2985a3},
{L, 8, 0x4f66e0},
{D, 5, 0x2985a1},
{R, 8, 0x093cc0},
{D, 6, 0x147e51},
{R, 5, 0x2d10f2},
{D, 3, 0x556901},
{R, 4, 0x5faca2},
{D, 11, 0x556903},
{R, 6, 0x05f662},
{D, 10, 0x4c7c61},
{R, 7, 0x5de9f2},
{U, 6, 0x08f971},
{R, 2, 0x596850},
{U, 4, 0x28a951},
{R, 8, 0x3b0580},
{D, 6, 0x389031},
{R, 6, 0x4eebc0},
{U, 8, 0x457f91},
{R, 8, 0x22fa62},
{U, 2, 0x31e091},
{R, 2, 0x2d9a72},
{U, 12, 0x31e093},
{L, 5, 0x47fd52},
{U, 7, 0x0a7881},
{R, 9, 0x3f4772},
{U, 8, 0x14cc01},
{R, 7, 0x4523f2},
{U, 4, 0x284ec3},
{L, 10, 0x4f1912},
{U, 5, 0x284ec1},
{L, 6, 0x020d02},
{U, 8, 0x50a8f1},
{R, 5, 0x1f1982},
{U, 8, 0x189181},
{R, 4, 0x560a20},
{U, 6, 0x01eaa1},
{R, 5, 0x277ca0},
{U, 4, 0x01eaa3},
{R, 3, 0x37dcc0},
{U, 6, 0x617251},
{R, 4, 0x60c832},
{U, 7, 0x0ea071},
{R, 4, 0x3f1080},
{U, 2, 0x3b5ca1},
{R, 12, 0x0283a0},
{U, 3, 0x127581},
{L, 11, 0x3c0640},
{U, 2, 0x530bb1},
{L, 5, 0x3d8aa0},
{U, 6, 0x3b2821},
{R, 4, 0x2aa830},
{U, 11, 0x640ec1},
{R, 4, 0x52d490},
{D, 4, 0x090e31},
{R, 5, 0x2276c2},
{D, 5, 0x119c71},
{R, 8, 0x3f79a0},
{D, 3, 0x6ccd31},
{R, 3, 0x3f79a2},
{U, 10, 0x1fe271},
{R, 4, 0x2276c0},
{U, 4, 0x15d191},
{R, 4, 0x369b90},
{U, 7, 0x799bb3},
{R, 6, 0x4fac30},
{D, 11, 0x0e5701},
{R, 3, 0x4d8050},
{D, 10, 0x2e83c1},
{R, 3, 0x0b2050},
{D, 6, 0x095701},
{L, 7, 0x433400},
{U, 4, 0x19adf1},
{L, 6, 0x339e00},
{U, 9, 0x48d2a1},
{L, 3, 0x21f7f0},
{D, 10, 0x128b01},
{L, 4, 0x427a92},
{D, 3, 0x1a9d31},
{L, 3, 0x0e7802},
{D, 3, 0x1a9d33},
{R, 2, 0x47d762},
{D, 10, 0x21bae1},
{R, 4, 0x0b2052},
{U, 5, 0x0c0ea1},
{R, 4, 0x5ded90},
{U, 5, 0x0192d1},
{R, 6, 0x620300},
{D, 7, 0x6c7981},
{R, 4, 0x3d8a30},
{U, 7, 0x2c9691},
{R, 7, 0x4e26b0},
{U, 4, 0x708341},
{R, 2, 0x3ad430},
{U, 3, 0x0ad4d1},
{R, 6, 0x43d5c0},
{U, 4, 0x5dcb61},
{R, 5, 0x43d5c2},
{U, 4, 0x2a6601},
{L, 11, 0x544070},
{U, 4, 0x198ab1},
{L, 6, 0x2e7e00},
{U, 5, 0x06a2a1},
{R, 11, 0x46a5d0},
{U, 4, 0x06a2a3},
{R, 6, 0x2bf9d0},
{U, 5, 0x57fc11},
{L, 7, 0x276be2},
{U, 3, 0x042e31},
{L, 3, 0x2776d2},
{U, 2, 0x1b3261},
{L, 7, 0x4101e2},
{U, 3, 0x541681},
{L, 8, 0x110fe2},
{U, 6, 0x09a751},
{L, 5, 0x500692},
{D, 12, 0x1cf1a1},
{L, 4, 0x071032},
{D, 8, 0x2a36c1},
{L, 3, 0x15a610},
{U, 8, 0x329701},
{L, 2, 0x15a612},
{U, 4, 0x35b961},
{L, 4, 0x2118e0},
{U, 3, 0x6ac751},
{L, 2, 0x5656c0},
{U, 5, 0x3c1771},
{L, 4, 0x809b90},
{U, 9, 0x114b91},
{L, 2, 0x581e50},
{U, 2, 0x0a7531},
{L, 6, 0x12f690},
{U, 3, 0x232e81},
{R, 8, 0x3e31e0},
{U, 2, 0x43a583},
{R, 2, 0x409852},
{U, 8, 0x397a23},
{R, 6, 0x04d072},
{D, 3, 0x397a21},
{R, 2, 0x41ac52},
{D, 9, 0x39dfd3},
{R, 5, 0x284ec0},
{D, 9, 0x391b83},
{R, 8, 0x217270},
{U, 6, 0x391b81},
{R, 5, 0x3d53e0},
{U, 11, 0x1d99d3},
{L, 5, 0x506260},
{U, 4, 0x3bc861},
{R, 3, 0x4b8062},
{U, 6, 0x490ef1},
{R, 2, 0x4b8060},
{U, 6, 0x1647d1},
{R, 4, 0x1cf6d0},
{U, 5, 0x19c4f1},
{R, 6, 0x1ccf02},
{U, 4, 0x4a8481},
{R, 5, 0x7be5f2},
{U, 8, 0x241481},
{R, 6, 0x12d622},
{U, 3, 0x042c71},
{R, 10, 0x56c9d0},
{U, 2, 0x014301},
{R, 4, 0x0fc980},
{D, 2, 0x53a921},
{R, 12, 0x363120},
{D, 4, 0x3d96c1},
{R, 4, 0x2f8bd0},
{D, 6, 0x121493},
{R, 4, 0x2d50c2},
{D, 10, 0x7c1f03},
{R, 2, 0x2d50c0},
{D, 3, 0x030c53},
{R, 5, 0x237c00},
{D, 9, 0x410f01},
{L, 5, 0x33b190},
{D, 4, 0x229f41},
{L, 7, 0x1336d2},
{D, 5, 0x547f31},
{L, 5, 0x2caa52},
{D, 4, 0x239271},
{L, 4, 0x095fa2},
{D, 5, 0x030e51},
{L, 10, 0x18ef02},
{D, 4, 0x335f53},
{R, 6, 0x713fd2},
{D, 3, 0x335f51},
{R, 6, 0x191692},
{D, 5, 0x030e53},
{R, 5, 0x04f892},
{U, 8, 0x239273},
{R, 9, 0x39cb62},
{D, 6, 0x5df591},
{R, 5, 0x46b3b0},
{D, 5, 0x79cb41},
{R, 6, 0x01c0c0},
{D, 7, 0x44c011},
{L, 4, 0x1de2d0},
{U, 4, 0x5ebd23},
{L, 11, 0x6df140},
{D, 4, 0x5ebd21},
{L, 4, 0x040000},
{D, 6, 0x44c013},
{R, 4, 0x530190},
{D, 7, 0x1c1161},
{R, 3, 0x33b192},
{D, 4, 0x372c01},
{R, 3, 0x546f42},
{U, 4, 0x2a6571},
{R, 2, 0x449332},
{U, 7, 0x54bff1},
{R, 7, 0x1b23c0},
{D, 7, 0x2d7981},
{R, 9, 0x35c490},
{D, 4, 0x24c001},
{R, 9, 0x4c9852},
{D, 4, 0x4458b1},
{R, 9, 0x4c9850},
{D, 3, 0x2f4e61},
{R, 5, 0x50e852},
{D, 5, 0x4bee31},
{L, 3, 0x1a16a2},
{D, 9, 0x12ca43},
{L, 2, 0x2d9312},
{D, 3, 0x46b2a3},
{L, 4, 0x526b82},
{U, 12, 0x251133},
{L, 5, 0x22b4c2},
{D, 4, 0x131713},
{L, 9, 0x6e8832},
{D, 8, 0x204f31},
{R, 6, 0x169c32},
{D, 2, 0x2fd441},
{R, 5, 0x66d810},
{D, 8, 0x5ed591},
{R, 2, 0x0bf4b0},
{D, 4, 0x14a621},
{R, 3, 0x72ccc2},
{D, 2, 0x3cd581},
{R, 6, 0x0cee22},
{D, 3, 0x257483},
{R, 5, 0x6fa3b2},
{D, 8, 0x2057a3},
{L, 5, 0x277202},
{D, 6, 0x3452a3},
{R, 4, 0x4d3212},
{D, 6, 0x711d63},
{R, 4, 0x4d3210},
{D, 9, 0x153883},
{R, 3, 0x0df322},
{D, 3, 0x779db3},
{R, 5, 0x1dce50},
{D, 3, 0x40de51},
{R, 7, 0x39aa20},
{D, 7, 0x033921},
{R, 3, 0x185790},
{D, 3, 0x5193c1},
{R, 5, 0x370902},
{D, 5, 0x01fbf1},
{R, 6, 0x4430a2},
{U, 9, 0x286c91},
{R, 6, 0x7b39a0},
{U, 6, 0x3e06c1},
{R, 6, 0x185792},
{U, 5, 0x047081},
{R, 3, 0x560500},
{U, 6, 0x424aa3},
{R, 4, 0x09c292},
{U, 4, 0x19dd43},
{R, 4, 0x063d92},
{D, 5, 0x31efd3},
{R, 9, 0x063d90},
{D, 2, 0x3f1773},
{R, 3, 0x09c290},
{D, 6, 0x355bd3},
{R, 2, 0x2d80d0},
{D, 11, 0x2ef481},
{L, 4, 0x2a6300},
{D, 4, 0x2ef483},
{R, 6, 0x31ba10},
{D, 10, 0x2ee1f3},
{L, 6, 0x086352},
{D, 4, 0x0e3a43},
{L, 7, 0x35b2a2},
{D, 5, 0x35e283},
{R, 10, 0x283b80},
{D, 3, 0x172603},
{R, 3, 0x5bcdd0},
{D, 4, 0x3521e3},
{L, 8, 0x840952},
{D, 2, 0x057e23},
{L, 5, 0x2322f2},
{D, 4, 0x054b01},
{L, 6, 0x03e2f0},
{U, 7, 0x4b2321},
{L, 3, 0x03e2f2},
{U, 10, 0x4574a1},
{L, 5, 0x3ce052},
{D, 6, 0x1b3eb3},
{L, 3, 0x2a72f2},
{D, 3, 0x121b93},
{L, 6, 0x3aab62},
{D, 5, 0x29e713},
{L, 2, 0x5e34a0},
{D, 3, 0x68dcd3},
{L, 7, 0x5e34a2},
{U, 2, 0x0b3a93},
{L, 6, 0x3aab60},
{U, 3, 0x381763},
{L, 10, 0x79d402},
{U, 6, 0x294063},
{L, 4, 0x26bce2},
{U, 7, 0x5420d1},
{L, 7, 0x59fbb2},
{D, 4, 0x5420d3},
{L, 6, 0x10d262},
{D, 8, 0x092ce3},
{L, 3, 0x65a082},
{D, 4, 0x126e63},
{L, 4, 0x01c382},
{D, 6, 0x035fe3},
{R, 3, 0x3c3512},
{D, 11, 0x592363},
{R, 2, 0x504812},
{D, 4, 0x3915f3},
{L, 5, 0x09bad2},
{U, 6, 0x3d87a1},
{L, 5, 0x34a710},
{D, 6, 0x67ab41},
{L, 4, 0x34a712},
{D, 3, 0x02d4b1},
{R, 5, 0x00fa02},
{D, 3, 0x2a3643},
{R, 9, 0x5c49d2},
{D, 4, 0x3c0f53},
{R, 4, 0x1fe2d2},
{U, 6, 0x042a93},
{R, 5, 0x2bbc40},
{U, 5, 0x4243f3},
{R, 7, 0x470220},
{U, 7, 0x423293},
{R, 5, 0x72be62},
{U, 4, 0x3b0ad3},
{R, 10, 0x1fe2d0},
{U, 3, 0x3e1953},
{R, 5, 0x411a22},
{D, 6, 0x1b8423},
{R, 5, 0x411a20},
{D, 2, 0x40ecc3},
{R, 8, 0x1b47c0},
{D, 3, 0x32abe3},
{L, 5, 0x77beb0},
{D, 2, 0x204d13},
{L, 8, 0x287a40},
{D, 4, 0x20bf83},
{R, 6, 0x4e0480},
{D, 2, 0x3acd53},
{R, 7, 0x22f6e0},
{D, 3, 0x3d2c83},
{L, 4, 0x1e16b0},
{D, 7, 0x040103},
{L, 4, 0x104d00},
{D, 10, 0x5b5d23},
{L, 7, 0x00cfe2},
{D, 6, 0x54bf23},
{L, 9, 0x2d65c2},
{U, 5, 0x2c6cf1},
{L, 2, 0x3d9d32},
{U, 7, 0x678031},
{L, 3, 0x3d9d30},
{U, 4, 0x065cf1},
{L, 4, 0x4332d2},
{D, 9, 0x32a373},
{L, 4, 0x27db62},
{D, 3, 0x287353},
{L, 6, 0x27db60},
{D, 6, 0x3f3353},
{L, 3, 0x2a8f02},
{D, 6, 0x54bf21},
{L, 4, 0x6ed432},
{D, 3, 0x1d8213},
{R, 3, 0x392ea2},
{D, 4, 0x479813},
{R, 7, 0x07dd70},
{D, 8, 0x0575d3},
{R, 6, 0x7c7f50},
{D, 3, 0x1ec9e3},
{L, 6, 0x0a3b30},
{D, 2, 0x50a403},
{L, 10, 0x213050},
{D, 5, 0x309da3},
{L, 4, 0x213052},
{D, 3, 0x101b13},
{L, 3, 0x402552},
{D, 9, 0x627693},
{L, 4, 0x2ab6c2},
{D, 7, 0x64c293},
{L, 3, 0x23bbe2},
{U, 8, 0x1bbba3},
{L, 2, 0x200f62},
{U, 6, 0x37d7c1},
{L, 8, 0x313452},
{U, 2, 0x4f7c41},
{L, 5, 0x491232},
{U, 5, 0x1bcf21},
{L, 3, 0x2d3552},
{D, 8, 0x76a901},
{L, 2, 0x2c91b2},
{D, 6, 0x7e3fe1},
{L, 5, 0x3f78a2},
{U, 3, 0x493011},
{L, 9, 0x231e52},
{U, 5, 0x50f6a1},
{R, 9, 0x271202},
{U, 6, 0x257991},
{L, 5, 0x512782},
{U, 2, 0x4b33b1},
{L, 3, 0x512780},
{U, 3, 0x484bf1},
{L, 3, 0x3d4e42},
{U, 9, 0x266761},
{R, 2, 0x4bcc92},
{U, 3, 0x1f0ab1},
{R, 9, 0x36cab2},
{U, 7, 0x612b31},
{R, 3, 0x3cd1e2},
{D, 4, 0x12c911},
{R, 8, 0x447160},
{D, 8, 0x439281},
{R, 3, 0x1cb6f0},
{D, 4, 0x5bab01},
{R, 4, 0x54c350},
{U, 3, 0x1e4791},
{R, 7, 0x281522},
{D, 7, 0x60ca51},
{R, 5, 0x0e7fd2},
{U, 7, 0x10e871},
{R, 4, 0x7efcb2},
{U, 6, 0x065a31},
{L, 3, 0x005a02},
{U, 2, 0x2236f1},
{L, 5, 0x4c7022},
{U, 2, 0x26a961},
{L, 8, 0x053f22},
{U, 3, 0x216bf1},
{R, 3, 0x053f20},
{U, 6, 0x45baf1},
{L, 3, 0x4c9e92},
{U, 9, 0x108473},
{L, 7, 0x2e7920},
{U, 4, 0x705d63},
{L, 6, 0x2e7922},
{U, 8, 0x5c1fe3},
{L, 6, 0x42ebd2},
{U, 3, 0x67f931},
{L, 10, 0x29baa2},
{U, 4, 0x327211},
{L, 5, 0x29baa0},
{U, 6, 0x429671},
{L, 6, 0x56ac72},
{U, 6, 0x342031},
{R, 5, 0x584232},
{U, 4, 0x698a51},
{R, 4, 0x2548f2},
{U, 5, 0x642fd3},
{L, 9, 0x19d402},
{U, 3, 0x0dc4a3},
{L, 4, 0x043b72},
{U, 4, 0x277823},
{L, 6, 0x3cd192},
{D, 9, 0x15c5e3},
{L, 4, 0x6674c0},
{D, 5, 0x3d3d23},
{L, 2, 0x6674c2},
{D, 8, 0x388de3},
{L, 5, 0x3cd190},
{U, 6, 0x1a5c93},
{L, 9, 0x043b70},
{D, 3, 0x18ced3},
{L, 9, 0x6b3432},
{D, 8, 0x423531},
{L, 4, 0x168272},
{U, 11, 0x7fe541},
{L, 5, 0x278db0},
{D, 3, 0x2457a1},
{L, 5, 0x278db2},
{D, 4, 0x42b3a1},
{L, 7, 0x30b640},
{D, 3, 0x2bda63},
{R, 8, 0x5ab530},
{D, 3, 0x2bda61},
{R, 4, 0x04b8a0},
{D, 5, 0x0f1a31},
{L, 7, 0x470452},
{D, 6, 0x80e551},
{L, 2, 0x185a12},
{D, 7, 0x80e553},
{L, 6, 0x30c5b2},
{U, 4, 0x4deaf1},
{L, 11, 0x168270},
{D, 4, 0x496f81},
{L, 3, 0x749790},
{D, 5, 0x3fb3c1},
{R, 4, 0x070050},
{D, 6, 0x22a081},
{R, 7, 0x437292},
{D, 5, 0x270811},
{R, 3, 0x382552},
{D, 3, 0x5295a1},
{R, 4, 0x2765a2},
{D, 3, 0x2c0b53},
{R, 9, 0x055802},
{D, 4, 0x425d03},
{R, 2, 0x150f72},
{D, 4, 0x5052f3},
{L, 4, 0x121590},
{D, 7, 0x58d8f3},
{L, 5, 0x121592},
{D, 2, 0x2c45e3},
{L, 8, 0x150f70},
{D, 8, 0x1cb8c3},
{L, 6, 0x055800},
{D, 7, 0x276223},
{L, 6, 0x7743d2},
{D, 6, 0x426e73},
{L, 10, 0x7743d0},
{U, 2, 0x4e4693},
{L, 2, 0x613fd2},
{U, 6, 0x65ace3},
};

#endif  // TEST_INPUT

struct Pos_t
{
    ssize_t x = 0, y = 0;

    bool operator <=> (const Pos_t&) const = default;
};

template<typename _F, typename _InputTransform>
void traverse(_F f, _InputTransform i)
{
    Pos_t from = {0, 0};
    for (const Step& input_step : input)
    {
		Step step = i(input_step);
        Pos_t to = from;
        to.x += step.n * step.dir.x;
        to.y += step.n * step.dir.y;
        f(from, to, step.n);
        from = to;
    }
}

// Trying to implement https://en.wikipedia.org/wiki/Shoelace_formula
struct State
{
	bool has_vertex = false;
	Pos_t first_vertex;
	Pos_t last_vertex;
	ssize_t accum = 0;
	ssize_t perimeter = 0;

	void update(const Pos_t& from, const Pos_t& to, int n)
	{
		perimeter += n;
		{
			if (!has_vertex)
			{
				has_vertex = true;
				first_vertex = last_vertex = from;
			}

			{
				accum += (last_vertex.y + to.y) * (last_vertex.x - to.x);
				last_vertex = to;
			}
		}
	}

	size_t result()
	{
		if (last_vertex != first_vertex)
		{
			accum += (last_vertex.y + first_vertex.y) * (last_vertex.x - first_vertex.x);
			last_vertex = first_vertex;
		}
		size_t total = std::abs(accum);
		return 1 + (perimeter + total) / 2;
	}
};

size_t part1()
{
    State state;
    traverse(
        [&](const Pos_t& from, const Pos_t& to, int n)
        {
            state.update(from, to, n);
        },
        [](const Step& s)
        {
            return s;
        }
    );

    return state.result();
}

size_t part2()
{
    State state;
    traverse(
        [&](const Pos_t& from, const Pos_t& to, int n)
        {
            state.update(from, to, n);
        },
        [](const Step& s)
        {
            Step rv;
            switch(s.color & 0x0F)
            {
                case 0: rv.dir = R; break;
                case 1: rv.dir = D; break;
                case 2: rv.dir = L; break;
                case 3: rv.dir = U; break;
            }
            rv.n = s.color >> 4;
            return rv;
        }
    );

    return state.result();
}

int main()
{
    std::cout << "Part 1:    " << part1() << std::endl;
    std::cout << "Part 2:    " << part2() << std::endl;
    return 0;
}
